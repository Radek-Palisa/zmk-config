/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sl { /delete-property/ quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        to_mac_tri_layer {
            bindings = <&to 3>;
            key-positions = <24 25>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        to_win_tri_layer {
            bindings = <&to 7>;
            key-positions = <24 25>;
            require-prior-idle-ms = <100>;
            layers = <4>;
        };
    };

    behaviors {
        bhm: bhm {
            compatible = "zmk,behavior-hold-tap";
            label = "balanced_homerow_mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
        };

        win_esc: win_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "WIN_ESC";
            bindings = <&kp ESC>, <&delete_line>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    macros {
        mac_keep_layer_left: mac_keep_layer_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &to 1>;
            label = "MAC_KEEP_LAYER_LEFT";
        };

        mac_keep_layer_right: mac_keep_layer_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &to 2>;
            label = "MAC_KEEP_LAYER_RIGHT";
        };

        win_keep_layer_left: win_keep_layer_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &to 5>;
            label = "WIN_KEEP_LAYER_LEFT";
        };

        win_keep_layer_right: win_keep_layer_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F22 &to 6>;
            label = "WIN_KEEP_LAYER_RIGHT";
        };

        delete_line: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp HOME>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp ESCAPE>;

            label = "DELETE_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_default {
            bindings = <
&kp Q  &kp W         &kp E        &kp R        &kp T    &kp Y  &kp U        &kp I        &kp O         &kp P
&kp A  &bhm LCTRL S  &bhm LALT D  &bhm LGUI F  &kp G    &kp H  &bhm RGUI J  &bhm RALT K  &bhm RCTRL L  &kp BACKSPACE
&kp Z  &kp X         &kp C        &kp V        &kp B    &kp N  &kp M        &kp COMMA    &kp DOT       &kp ENTER
&sl 1  &sk LSHIFT                                                                        &kp SPACE     &sl 2
            >;
        };

        left_layer {
            bindings = <
&kp N0   &kp N7         &kp N8        &kp N9              &kp ASTRK    &kp CARET  &kp AMPS        &kp ASTRK       &kp DQT         &kp SEMI
&kp ESC  &bhm LCTRL N4  &bhm LALT N5  &bhm LGUI NUMBER_6  &kp EQUAL    &kp BSLH   &bhm LGUI LBRC  &bhm RALT RBRC  &bhm RCTRL SQT  &kp COLON
&kp N0   &kp N1         &kp N2        &kp N3              &kp MINUS    &kp PLUS   &kp LT          &kp GT          &kp QMARK       &kp SLASH
&sl 1    &to 0                                                                                                    &kp SPACE       &mac_keep_layer_left
            >;
        };

        right_layer {
            bindings = <
&kp EXCL               &kp AT           &kp HASH        &kp DLLR        &kp PERCENT    &kp LC(GRAVE)  &kp PAGE_UP  &kp UP        &kp PAGE_DOWN  &kp RG(BSLH)
&kp GRAVE              &bhm LCTRL PIPE  &bhm LALT LPAR  &bhm LGUI RPAR  &kp EQUAL      &none          &kp LEFT     &kp DOWN      &kp RIGHT      &none
&kp TILDE              &kp UNDER        &kp LBKT        &kp RBKT        &kp MINUS      &none          &kp TAB      &kp RG(LBKT)  &kp RG(RBKT)   &kp RA(SLASH)
&mac_keep_layer_right  &kp LSHFT                                                                                                 &to 0          &sl 2
            >;
        };

        tri_layer {
            bindings = <
&kp LC(LG(Q))  &none       &to 4       &none  &kp M    &kp LS(LC(LG(NUMBER_4)))  &kp LS(LG(N5))  &trans        &trans      &trans
&none          &none       &none       &none  &none    &kp RG(PLUS)              &none           &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR     &bt BT_NXT  &bt BT_PRV  &none  &none    &kp RG(MINUS)             &none           &kp K_VOL_DN  &trans      &trans
&to 0          &none                                                                                           &none       &none
            >;
        };

        win_default {
            bindings = <
&kp Q  &kp W            &kp E        &kp R         &kp T    &kp Y  &kp U         &kp I        &kp O        &kp P
&kp A  &bhm LEFT_WIN S  &bhm LALT D  &bhm LCTRL F  &kp G    &kp H  &bhm RCTRL J  &bhm RALT K  &bhm RWIN L  &win_esc
&kp Z  &kp X            &kp C        &kp V         &kp B    &kp N  &kp M         &kp COMMA    &kp DOT      &kp ENTER
&sl 5  &sk LEFT_SHIFT                                                                         &kp SPACE    &sl 6
            >;
        };

        win_left {
            bindings = <
&kp N0      &kp N7        &kp N8        &kp N9         &kp ASTRK    &kp CARET  &kp AMPERSAND    &kp ASTRK       &kp DOUBLE_QUOTES  &kp SEMICOLON
&kp ESCAPE  &bhm LWIN N4  &bhm LALT N5  &bhm LCTRL N6  &kp EQUAL    &kp BSLH   &bhm RCTRL LBRC  &bhm RALT RBRC  &bhm RWIN SQT      &kp COLON
&kp N0      &kp N1        &kp N2        &kp N3         &kp MINUS    &kp PLUS   &kp LT           &kp GT          &kp QMARK          &kp SLASH
&sl 5       &to 4                                                                                               &kp SPACE          &win_keep_layer_left
            >;
        };

        win_right {
            bindings = <
&kp EXCL               &kp AT          &kp HASH        &kp DLLR         &kp PRCNT    &kp LC(GRAVE)  &kp PAGE_UP  &kp UP        &kp PAGE_DOWN  &kp LC(BSLH)
&kp GRAVE              &bhm LWIN PIPE  &bhm LALT LPAR  &bhm LCTRL RPAR  &kp EQUAL    &none          &kp LEFT     &kp DOWN      &kp RIGHT      &none
&kp TILDE              &kp UNDER       &kp LBKT        &kp RBKT         &kp MINUS    &none          &kp TAB      &kp LC(LBKT)  &kp LC(RBKT)   &kp RA(SLASH)
&mac_keep_layer_right  &kp LSHFT                                                                                               &to 4          &sl 6
            >;
        };

        win_tri {
            bindings = <
&kp LG(L)   &none       &to 0       &none  &kp W    &kp PRINTSCREEN  &none  &none              &none       &none
&none       &none       &none       &none  &none    &kp LC(PLUS)     &none  &kp K_VOLUME_UP    &kp K_MUTE  &none
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &none  &none    &kp LC(MINUS)    &none  &kp K_VOLUME_DOWN  &none       &none
&to 4       &none                                                                              &none       &none
            >;
        };
    };
};
