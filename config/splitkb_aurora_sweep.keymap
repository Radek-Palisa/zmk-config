/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        bhm: bhm {
            compatible = "zmk,behavior-hold-tap";
            label = "balanced_homerow_mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W         &kp E        &kp R        &kp T    &kp Y  &kp U        &kp I        &kp O         &kp P
&kp A  &bhm LCTRL S  &bhm LALT D  &bhm LGUI F  &kp G    &kp H  &bhm RGUI J  &bhm RALT K  &bhm RCTRL L  &kp BACKSPACE
&kp Z  &kp X         &kp C        &kp V        &kp B    &kp N  &kp M        &kp COMMA    &kp DOT       &kp ENTER
&mo 1  &sk LSHIFT                                                                        &kp SPACE     &mo 2
            >;
        };

        left_layer {
            bindings = <
&none    &kp N7         &kp N8        &kp N9              &kp ASTRK    &kp CARET  &kp AMPS        &kp ASTRK       &kp DQT         &kp SEMI
&kp ESC  &bhm LCTRL N4  &bhm LALT N5  &bhm LGUI NUMBER_6  &kp N0       &kp BSLH   &bhm LGUI LBRC  &bhm RALT RBRC  &bhm RCTRL SQT  &kp COLON
&kp ESC  &kp N1         &kp N2        &kp N3              &kp N0       &kp PLUS   &kp LT          &kp GT          &kp QMARK       &kp SLASH
&mo 1    &kp LSHIFT                                                                                               &none           &mo 2
            >;
        };

        right_layer {
            bindings = <
&kp EXCL   &kp AT           &kp HASH        &kp DLLR        &kp PERCENT    &kp LC(GRAVE)  &kp PAGE_UP  &kp UP        &kp PAGE_DOWN  &kp RG(BSLH)
&kp GRAVE  &bhm LCTRL PIPE  &bhm LALT LPAR  &bhm LGUI RPAR  &kp EQUAL      &none          &kp LEFT     &kp DOWN      &kp RIGHT      &none
&kp TILDE  &kp UNDER        &kp LBKT        &kp RBKT        &kp MINUS      &none          &kp TAB      &kp RG(LBKT)  &kp RG(RBKT)   &kp RA(SLASH)
&mo 3      &kp LSHFT                                                                                                 &none          &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp LC(LG(Q))  &none       &none       &none  &none    &kp LS(LC(LG(NUMBER_4)))  &kp LS(LG(N5))  &trans        &trans      &trans
&none          &none       &none       &none  &none    &kp RG(PLUS)              &none           &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR     &bt BT_NXT  &bt BT_PRV  &none  &none    &kp RG(MINUS)             &none           &kp K_VOL_DN  &trans      &trans
&trans         &trans                                                                                          &trans      &trans
            >;
        };

        win_default {
            bindings = <
&kp Q  &kp W            &kp E        &kp R         &kp T    &kp Y  &kp U         &kp I        &kp O        &kp P
&kp A  &bhm LEFT_WIN S  &bhm LALT D  &bhm LCTRL F  &kp G    &kp H  &bhm RCTRL J  &bhm RALT K  &bhm RWIN L  &kp BSPC
&kp Z  &kp X            &kp C        &kp V         &kp B    &kp N  &kp M         &kp COMMA    &kp DOT      &kp ENTER
&mo 5  &sk LEFT_SHIFT                                                                         &kp SPACE    &mo 6
            >;
        };

        win_left {
            bindings = <
&trans  &trans     &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&mo 5   &kp LSHFT                                                    &trans  &trans
            >;
        };

        win_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
